#!/usr/bin/python
""" Pre-commit script for git"""

import subprocess
from python import id_python
from python import lint


def main():
	print 'Beginning pre commit proceedures.'
	if has_git_exit_code('rev-parse', '--verify', 'HEAD'):
		against='4b825dc642cb6eb9a060e54bf8d69288fbee4904'
	else:
		against='HEAD'

	errors=''
	for file in get_git_output('diff', '--cached', '--name-only', against).split():
		if id_python.is_python(file): 			
			print "Linting {0}".format(file),
			print_dots()
		
			is_valid, new_errors = lint.pylint(file)
			if not is_valid:
				errors = "{0}Errors for {1}:\n{2}".format(
						errors,
						file,
						new_errors
						)
				print "Errors"
			else:
				print "Passed"
		
		print "Checking for ASCII in {0}".format(file),
		print_dots()
		try:
			file.split('/')[-1].decode('ascii')
		except UnicodeDecoderError:
		  warning = "Warning: You have a non-ascii character in your file name."
			errors = (
					"{0}\n{1}".format(errors, warning)
					)
			print "Errors"
		else:
			print "Done"
	
	if errors:
		print "\n{0}".format(errors)
		exit(5)
	else:
		exit(0)

			
def git(args):
	git_list = ['git']
	git_list.extend(args)
	return subprocess.Popen(git_list, stdout=subprocess.PIPE)

def has_git_exit_code(*args):
	git_call = git(args)
	git_call.poll()
	if git_call.returncode:
		return True
	
	return False

def get_git_output(*args):
	git_call = git(args)
	stdout, stderr = git_call.communicate()
	if stderr:
		return stderr
	
	return stdout


def format_errors(errors, file_name):
	formatted_errors = errors[:-1].replace("{0}:".format(file_name), "line ")
	return "\n\t".join(formatted_errors.split("\n")) + "\n"

def print_dots():
	for each in range(10):
		print ".",
	
	
if __name__ == '__main__':
	main() 